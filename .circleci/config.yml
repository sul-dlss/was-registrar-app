
version: 2

references:
  default_docker_ruby_executor: &default_docker_ruby_executor
    image: circleci/ruby:2.6.3-stretch-node
    environment:
      BUNDLER_VERSION: 2.0.2
      BUNDLE_JOBS: 3
      BUNDLE_RETRY: 3
      BUNDLE_PATH: vendor/bundle
      PGHOST: 127.0.0.1
      PGUSER: circleci-demo-ruby
      PGPASSWORD: ""
      RAILS_ENV: test
  postgres: &postgres
    image: circleci/postgres:9.5-alpine
    environment:
      POSTGRES_USER: circleci-demo-ruby
      POSTGRES_DB: test
      POSTGRES_PASSWORD: ""

jobs:
  build:
    docker:
      - *default_docker_ruby_executor
    steps:
      - checkout
      # Install bundler
      - run:
          name: Install bundler
          command: gem install bundler
      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v
      # bundle cache
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      # Store bundle cache
      - save_cache:
          key: rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-
      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn
      # Store yarn / webpacker cache
      - save_cache:
          key: rails-demo-yarn-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Webpacker compile
          command: NODE_ENV=test bundle exec rails webpacker:compile
      # Copy packs into the workspace
      - persist_to_workspace:
          root: ~/project
          paths: '*'
  test:
    parallelism: 3
    docker:
      - *default_docker_ruby_executor
      - *postgres
    steps:
      - attach_workspace:
          at: '~/project'
      - restore_cache:
          keys:
            - rails-demo-bundle-v2-{{ checksum "Gemfile.lock" }}
            - rails-demo-bundle-v2-
      # Install bundler
      - run:
          name: Install bundler
          command: gem install bundler
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - restore_cache:
          keys:
            - rails-demo-yarn-{{ checksum "yarn.lock" }}
            - rails-demo-yarn-
      - run:
          name: Rubocop
          command: bundle exec rubocop
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run:
          name: Database setup
          command: bundle exec rails db:schema:load --trace
      - run:
          name: Setup Code Climate test-reporter
          command: |
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter
      # Run rspec in parallel
      - run:
          command: |
            mkdir -p test-results/rspec
            ./cc-test-reporter before-build
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 --format RspecJunitFormatter --out test-results/rspec/rspec.xml --format progress -- ${TESTFILES}
      - run:
          name: Code Climate Test Coverage
          command: ./cc-test-reporter format-coverage -t simplecov -o "coverage/codeclimate.$CIRCLE_NODE_INDEX.json"
      - persist_to_workspace:
          root: coverage
          paths:
            - codeclimate.*.json
      - run:
          name: Send test report to Code Climate
          command: |
            ./cc-test-reporter sum-coverage --output - coverage/codeclimate.*.json | ./cc-test-reporter upload-coverage --input -
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-artifacts

workflows:
  version: 2
  build_and_test:
    jobs:
      - build
      - test:
          requires:
            - build
