=begin
#WASAPI Export API as implemented by Archive-It

#WASAPI Export API.  What Archive-It has implemented. 

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.0

=end

require 'date'

module OpenapiClient
  # Description of a unit of distribution of web archival data.  (This data type does not include the actual archival data.)  Examples: a WARC file, an ARC file, a CDX file, a WAT file, a DAT file, a tarball. 
  class WebdataFile
    # The name of the webdata file
    attr_accessor :filename

    # The format of the archive file, eg `warc`, `wat`, `cdx` 
    attr_accessor :filetype

    # Verification of the content of the file.  Must include at least one of MD5 or SHA1.  The key specifies the lowercase name of the algorithm; the element is a hexadecimal string of the checksum value.  For example: {\"sha1\":\"6b4f32a3408b1cd7db9372a63a2053c3ef25c731\", \"md5\":\"766ba6fd3a257edf35d9f42a8dd42a79\"} 
    attr_accessor :checksums

    # The size in bytes of the webdata file
    attr_accessor :size

    # The numeric ID of the collection
    attr_accessor :collection

    # The numeric ID of the crawl
    attr_accessor :crawl

    # Time the original content of the file was crawled
    attr_accessor :crawl_time

    # Time the crawl started
    attr_accessor :crawl_start

    # A list of (mirrored) sources from which to retrieve (identical copies of) the webdata file, eg `https://partner.archive-it.org/webdatafile/ARCHIVEIT-4567-CRAWL_SELECTED_SEEDS-JOB1000016543-20170107214356419-00005.warc.gz`, `/ipfs/Qmee6d6b05c21d1ba2f2020fe2db7db34e` 
    attr_accessor :locations

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'filename' => :'filename',
        :'filetype' => :'filetype',
        :'checksums' => :'checksums',
        :'size' => :'size',
        :'collection' => :'collection',
        :'crawl' => :'crawl',
        :'crawl_time' => :'crawl-time',
        :'crawl_start' => :'crawl-start',
        :'locations' => :'locations'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'filename' => :'String',
        :'filetype' => :'String',
        :'checksums' => :'Object',
        :'size' => :'Integer',
        :'collection' => :'Integer',
        :'crawl' => :'Integer',
        :'crawl_time' => :'DateTime',
        :'crawl_start' => :'DateTime',
        :'locations' => :'Array<String>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::WebdataFile` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::WebdataFile`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'filename')
        self.filename = attributes[:'filename']
      end

      if attributes.key?(:'filetype')
        self.filetype = attributes[:'filetype']
      end

      if attributes.key?(:'checksums')
        self.checksums = attributes[:'checksums']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'collection')
        self.collection = attributes[:'collection']
      end

      if attributes.key?(:'crawl')
        self.crawl = attributes[:'crawl']
      end

      if attributes.key?(:'crawl_time')
        self.crawl_time = attributes[:'crawl_time']
      end

      if attributes.key?(:'crawl_start')
        self.crawl_start = attributes[:'crawl_start']
      end

      if attributes.key?(:'locations')
        if (value = attributes[:'locations']).is_a?(Array)
          self.locations = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @filename.nil?
        invalid_properties.push('invalid value for "filename", filename cannot be nil.')
      end

      if @filetype.nil?
        invalid_properties.push('invalid value for "filetype", filetype cannot be nil.')
      end

      if @checksums.nil?
        invalid_properties.push('invalid value for "checksums", checksums cannot be nil.')
      end

      if @locations.nil?
        invalid_properties.push('invalid value for "locations", locations cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @filename.nil?
      return false if @filetype.nil?
      return false if @checksums.nil?
      return false if @locations.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          filename == o.filename &&
          filetype == o.filetype &&
          checksums == o.checksums &&
          size == o.size &&
          collection == o.collection &&
          crawl == o.crawl &&
          crawl_time == o.crawl_time &&
          crawl_start == o.crawl_start &&
          locations == o.locations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [filename, filetype, checksums, size, collection, crawl, crawl_time, crawl_start, locations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        OpenapiClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
